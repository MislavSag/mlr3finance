% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOpImputeNalocf.R
\name{mlr_pipeops_imputelocf}
\alias{mlr_pipeops_imputelocf}
\alias{PipeOpImputeLocf}
\title{Impute NA and/or Inf Values via LOCF using setnafill}
\description{
This PipeOp imputes missing values in numeric features using last observation carried forward (LOCF)
imputation via data.table's \code{setnafill()}. It can be configured to impute:
\itemize{
\item Only \code{NA} values (leaving infinite values untouched),
\item Only infinite (\code{Inf} or \code{-Inf}) values (imputing only positions that are infinite),
\item Both \code{NA} and infinite values.
}
For the \code{"inf"} option, only positions with infinite values are imputed (original \code{NA} values remain unchanged).
}
\section{Parameters}{

The parameters are inherited from \code{\link[mlr3pipelines:PipeOpTaskPreprocSimple]{PipeOpTaskPreprocSimple}},
plus the following:
\itemize{
\item \code{impute_on} :: \code{character(1)}\cr
Determines which values to impute. Allowed values are \code{"na"}, \code{"inf"}, or \code{"both"}. Default is \code{"both"}.
}
}

\section{Super classes}{
\code{\link[mlr3pipelines:PipeOp]{mlr3pipelines::PipeOp}} -> \code{\link[mlr3pipelines:PipeOpTaskPreproc]{mlr3pipelines::PipeOpTaskPreproc}} -> \code{\link[mlr3pipelines:PipeOpTaskPreprocSimple]{mlr3pipelines::PipeOpTaskPreprocSimple}} -> \code{PipeOpImputeLocf}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-PipeOpImputeLocf-new}{\code{PipeOpImputeLocf$new()}}
\item \href{#method-PipeOpImputeLocf-clone}{\code{PipeOpImputeLocf$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="help"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-help'><code>mlr3pipelines::PipeOp$help()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="predict"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-predict'><code>mlr3pipelines::PipeOp$predict()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="print"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-print'><code>mlr3pipelines::PipeOp$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="train"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-train'><code>mlr3pipelines::PipeOp$train()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PipeOpImputeLocf-new"></a>}}
\if{latex}{\out{\hypertarget{method-PipeOpImputeLocf-new}{}}}
\subsection{Method \code{new()}}{
Constructor.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpImputeLocf$new(id = "imputelocf", param_vals = list())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
Identifier of the resulting object, default \code{"imputelocf"}.}

\item{\code{param_vals}}{(named \code{list()})\cr
List of hyperparameter settings. Default is \code{list()}.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PipeOpImputeLocf-clone"></a>}}
\if{latex}{\out{\hypertarget{method-PipeOpImputeLocf-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpImputeLocf$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
